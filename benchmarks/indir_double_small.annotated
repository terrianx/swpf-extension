; ModuleID = 'indir_acc.c'
source_filename = "indir_acc.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.A = private unnamed_addr constant [10 x i32] [i32 0, i32 9, i32 1, i32 8, i32 2, i32 7, i32 3, i32 6, i32 4, i32 5], align 16
@__const.main.B = private unnamed_addr constant [10 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9], align 16

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca [10 x i32], align 16
  %4 = alloca [10 x i32], align 16
  %5 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %3, ptr align 16 @__const.main.A, i64 40, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %4, ptr align 16 @__const.main.B, i64 40, i1 false)
  store i32 0, ptr %5, align 4
  br label %6

6:                                                ; preds = %17, %0
  %7 = load i32, ptr %5, align 4 // get i
  %8 = icmp slt i32 %7, 10 // i < 10
  br i1 %8, label %9, label %20

9:                                                ; preds = %6
  %10 = load i32, ptr %5(i), align 4 // get i
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds [10 x i32], ptr %3(A), i64 0, i64 %11 // A+i
  %13 = load i32, ptr %12{A+i}, align 4 // load A[i]
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [10 x i32], ptr %4(B), i64 0, i64 %14 // get B+A[i]
  %16 = load i32, ptr %15(B+A[i]), align 4 // load B[A[i]]
  store i32 %16(B[A[i]]), ptr %2 (x), align 4 // x = B[A[i]]
  br label %17

17:                                               ; preds = %9
  %18 = load i32, ptr %5, align 4 // get i
  %19 = add nsw i32 %18, 1 // i+1
  store i32 %19, ptr %5, align 4 // i = i+1
  br label %6, !llvm.loop !6

20:                                               ; preds = %6
  %21 = load i32, ptr %2, align 4
  ret i32 %21
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

attributes #0 = { noinline nounwind uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 16.0.6 (https://github.com/llvm/llvm-project.git 7cbf1a2591520c2491aa35339f227775f4d3adf6)"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
